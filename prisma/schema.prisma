// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
  posts     Post[] // Relationship: One user can create many posts
  comments  Comment[] // Relationship: One user can create many comments
  likes     Like[] // Relationship: One user can like many posts
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  title     String
  url       String? // Optional URL (Hacker News allows text-only posts too)
  content   String?
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[] // Relationship: A post can have multiple comments
  likes     Like[] // Relationship: A post can have multiple likes
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id      String @id @default(uuid())
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id]) // Self-referencing relation
  parentId String?
  replies  Comment[] @relation("CommentReplies") // Relation name must match

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Ensures a user can like a post only once
}
